buildscript {
    ext {
        kotlinVersion = '1.3.0'
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")

        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'

        classpath group: 'com.palantir.gradle.gitversion', name: 'gradle-git-version', version: '0.5.3'
        classpath('com.bmuschko:gradle-docker-plugin:3.2.4')

//		classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.google.protobuf'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: "com.palantir.git-version"
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

group = 'edu.beuth'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}


dependencies {
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
    compile 'org.springframework.boot:spring-boot-starter-web'

    compile group: 'org.springframework', name: 'spring-webmvc', version: '5.1.4.RELEASE'
    compile group: 'io.github.lognet', name: 'grpc-spring-boot-starter', version: '3.0.0'

    compile group: 'org.thymeleaf', name: 'thymeleaf', version: '3.0.11.RELEASE'
    compile group: 'org.thymeleaf', name: 'thymeleaf-spring5', version: '3.0.11.RELEASE'
//	compile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf', version: '2.1.2.RELEASE'
    compile group: 'org.json', name: 'json', version: '20180813'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.5.1-1"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.18.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

def details = versionDetails()
def imageTag = "${project.version}-${details?.gitHash}"


sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

//docker {
//    registryCredentials {
//        url = 'https://eu.gcr.io'
//        username = '_json_key'
//        password = file('secret.json').text
//    }
//}
//
//def imagePath = "eu.gcr.io/movies"
//
//task createApiDockerfile(type: Dockerfile) {
//    def path = project.file("docker/api")
//    destFile = project.file("${path.path}/Dockerfile")
//
//    from "openjdk:8u191-alpine"
//    runCommand "bash -c 'touch /main.jar'"
//    print "${jar.archiveName}  "
//    addFile "${jar.archiveName}", "main.jar"
//    entryPoint { ["java", "-jar", "/main.jar"] }
//    outputs.upToDateWhen { false }
//    doFirst {
//        println "Deleting old jar files"
//        delete fileTree(path) {
//            include '**/*.jar'
//        }
//        println "Copying jar files"
//        copy {
//            from jar
//            into path
//        }
//    }
//}
//
//task buildApiDockerImage(type: DockerBuildImage) {
//    def path = project.file("docker/api")
//    dockerFile project.file("${path.path}/Dockerfile")
//    inputDir project.file("${path.path}")
//    tag "$imagePath/api:$imageTag"
//    dependsOn createApiDockerfile
//}
//
//task pushApiDockerImage(type: DockerPushImage) {
//    imageName "$imagePath/api"
//    tag imageTag
//    dependsOn buildApiDockerImage
//}